import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import Throttled
from aiogram.dispatcher import FSMContext
import requests
from lxml import etree

bot = Bot(token="") # Тут укажите токен бота!
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

htmlparser = etree.HTMLParser()

@dp.message_handler(content_types=["text"])
async def msg(message: types.Message):
    if 'CVE-' in message.text:
        result = requests.get(f'https://www.opencve.io/cve/{message.text}')
        result1 = requests.get(f'https://cve.report/{message.text}')
        html2 = result1.text
        tree2 = etree.XML(html2,htmlparser)  
        try:
            result = requests.get(f'https://www.opencve.io/cve/{message.text}')
            html = result.text
            tree = etree.XML(html,htmlparser)  
            Date = tree.xpath('//html/body/div[1]/div/section[2]/div/div[2]/div[1]/div[2]/p[1]/text()')[0]
            Level = tree.xpath('//html/body/div[1]/div/section[2]/div/div[1]/div[2]/div/div[1]/div/div[1]/div/div[1]/h3/text()')[0]
            url = tree.xpath('//html/body/div[1]/div/section[2]/div/div[1]/div[3]/div[2]/table/tbody/tr[1]/td[1]/a/@href')[0]
            text = tree.xpath('//html/body/div[1]/div/section[2]/div/div[1]/div[3]/div[2]/table/tbody/tr[1]/td[2]/span[1]/text()')[0]
            url1 = tree.xpath('//html/body/div[1]/div/section[2]/div/div[1]/div[3]/div[2]/table/tbody/tr[2]/td[1]/a/@href')[0]
            text1 = tree.xpath('//html/body/div[1]/div/section[2]/div/div[1]/div[3]/div[2]/table/tbody/tr[2]/td[2]/span[1]/text()')[0]
            url2 = tree.xpath('//html/body/div[1]/div/section[2]/div/div[1]/div[3]/div[2]/table/tbody/tr[3]/td[1]/a/@href')[0]
            text2 = tree.xpath('//html/body/div[1]/div/section[2]/div/div[1]/div[3]/div[2]/table/tbody/tr[3]/td[2]/span[1]/text()')[0]
            result1 = requests.get(f'https://cve.report/{message.text}')
            html1 = result1.text
            tree1 = etree.XML(html1,htmlparser) 
            Description = tree1.xpath('//html/body/div[1]/div[1]/div[1]/div/div[2]/p[2]/text()')[0]
            try:
                keyboard = types.InlineKeyboardMarkup()
                buttons = [
                    types.InlineKeyboardButton(f'Тип {text}', url=url), #Анечка, просто спасибо за то что делаешь меня счастливым)
                    types.InlineKeyboardButton(f'Тип {text1}', url=url1),
                    types.InlineKeyboardButton(f'Тип {text2}', url=url2)
                    ]
                keyboard.add(*buttons)
                await bot.send_message(message.chat.id, f"<b>Название</b>: {message.text}\n\n<b>Описание</b>: {Description}\n\n<b>Уровень опасности</b>: {Level}/10\n\nДата обнаружения: {Date}\n\n<b>Ссылки связаные с cve ниже</b>", parse_mode='html', reply_markup=keyboard)
                pass
            except:
                await bot.send_message(message.chat.id, f"<b>Название</b>: {message.text}\n\n<b>Описание</b>: {Description}\n\n<b>Уровень опасности</b>: {Level}/10\n\nДата обнаружения: {Date}\n\n<b>Ссылки не обнаружены!</b>", parse_mode='html')
                pass
        except Exception as exc:
            print(exc)
            print(f'Сообщение {message.text} было проигнорировано!')
            pass
    else:
        print(f'Сообщение {message.text} было проигнорировано!')
        pass
 
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)